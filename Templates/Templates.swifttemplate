import Foundation
import MeowMongo

<%
// Selects all classes and structs that are either based on a model or embeddable protocol
let classes = (types.classes.based["Model"] ?? []) + (types.classes.based["Embeddable"] ?? [])
let structs = (types.structs.based["Model"] ?? []) + (types.structs.based["Embeddable"] ?? [])
let serializables = classes + structs

let supportedPrimitives = ["ObjectId", "String", "Int", "Int32", "Bool", "Document", "Double", "Data", "Binary", "Date", "RegularExpression"]
%>

<%
for primitive in supportedPrimitives {
  %>

  extension Array where Element == <%= primitive %> {
    init?(_ primitive: Primitive?) {
      guard let doc = Document(primitive) else {
        return nil
      }

      let schrodingerSelf = try? doc.arrayValue.map { primitive in
        return try Meow.Helpers.requireValue(<%= primitive %>(primitive), keyForError: "")
      }

      guard let me = schrodingerSelf else {
        return nil
      }

      self = me
    }
  }
  <%
}
%>

<%
// Keeps track of all used types so they don't occur twice, workaround for a Sourcery bug
var usedNames = [String]()
%>

<%
// Selects all enums that are embeddable and generates a ype safe query for them, as well as it's conversion to a BSONValue
for type in types.enums where type.based["Embeddable"] != nil && type.rawTypeName != nil && supportedPrimitives.contains(type.rawTypeName!.name) {
  %>
  extension <%= type.name %> : ConcreteSingleValueSerializable {
    <%
    // Creates this type from a BSON Primitive
    %>
    init(value: Primitive?) throws {
      let value = try Meow.Helpers.requireValue(value, keyForError: "")
      let primitiveValue: <%= type.rawTypeName! %> = try Meow.Helpers.requireValue(<%= type.rawTypeName! %>(value), keyForError: "")
      let me: <%= type.name %> = try Meow.Helpers.requireValue(<%= type.name %>(rawValue: primitiveValue), keyForError: "")

      self = me
    }

    <%
    // Serializes this enum case to a BSON type
    %>
    func meowSerialize() -> Primitive {
      return self.rawValue
    }

    <%
    // Serializes this enum case to a BSON type
    %>
    func meowSerialize(resolvingReferences: Bool = false) throws -> Primitive {
      return self.rawValue
    }

    <%
    // Generates a type safe query object for this enum type
    %>
    struct VirtualInstance {
      <%
      // Compares this enum's VirtualInstance type with an actual enum case and generates a Query
      %>
      static func ==(lhs: VirtualInstance, rhs: <%= type.name %>) -> Query {
        return lhs.keyPrefix == rhs.meowSerialize()
      }

      var keyPrefix: String

      init(keyPrefix: String = "") {
        self.keyPrefix = keyPrefix
      }
    }
  }
<% } %>

<%
// Loops over all serializable objects and creates an extension to ConcreteSerializable for each one
// ConcreteSerializable allows serializing to and from a BSON Document with this type
for type in serializables {
  %>
  extension <%= type.name %> : ConcreteSerializable {
    func meowSerialize() -> Document {
      return (try? self.meowSerialize(resolvingReferences: false) ) ?? Document()
    }

    func meowSerialize(resolvingReferences: Bool) throws -> Document {
      <%
      // Add the _id for models
      if type.based["Model"] != nil {
        %>
        var doc: Document = ["_id": self.id]
      <% } else { %>
        var doc = Document()
      <% } %>

      <%
      // If this is a DynamicSerializable object, apply the additionalFields fields that don't reside inside the schema
      if type.based["DynamicSerializable"] != nil {
        %>
        doc += self.additionalFields
      <% } %>

      <%
      // Loops over all variables in this Model/Embeddable and serializes them to the output document
      for variable in type.allVariables where variable.name != "id" {
        // If it's an array of Primitive types
        if variable.isArray, let elementType = variable.type?.name, supportedPrimitives.contains(elementType) {
          %>
          doc["<%= variable.name %>"] = self.<%= variable.name %>
        <%} else if variable.isArray, variable.typeName.array?.elementType?.based["Embeddable"] != nil {%>
          doc["<%= variable.name %>"] = self.<%= variable.name %><% if variable.typeName.isOptional { %>?<% } %>.map { $0.meowSerialize() }
          // If it's an array of references
        <%} else if variable.isArray, variable.typeName.array?.elementType?.name == "Reference" {%>
          doc["<%= variable.name %>"] = self.<%= variable.name %><% if variable.typeName.isOptional { %>?<% } %>.map { $0.id }
        <%     } else if supportedPrimitives.contains(variable.typeName.unwrappedTypeName) {%>
          doc["<%= variable.name %>"] = self.<%= variable.name %>
          <%
          // If this is a single reference
        } else if variable.typeName.name.hasPrefix("Reference") {%>
          if resolvingReferences {
            doc["<%= variable.name %>"] = try self.<%= variable.name %><% if variable.typeName.isOptional { %>?<% } %>.resolve().meowSerialize()
          } else {
            doc["<%= variable.name %>"] = self.<%= variable.name %><% if variable.typeName.isOptional { %>?<% } %>.id
          }
        <%} else if variable.type?.based["Embeddable"] != nil { %>
          doc["<%= variable.name %>"] = self.<%= variable.name %><% if variable.typeName.isOptional { %>?<% } %>.meowSerialize()
          <%
        } else {
          %>
          // <%= variable %>
          // <%= variable.type %>
          // <%= variable.type?.based %>
          // <%= variable.typeName %>
          <%
        }
      }%>

      return doc
    }

    <%
    // Creates a new instance of this model/embeddable from a Document
    %>
  <% if type.kind == "class" { %> convenience <% } %> init(fromDocument source: Document) throws {
      var source = source
      // Extract all properties
      <% usedNames = [] %>
      <% for variable in type.variables where !usedNames.contains(variable.name) { %>
        <% usedNames.append(variable.name) %>
        <% if variable.name == "id" { %>
          let idValue: ObjectId = try Meow.Helpers.requireValue(source.removeValue(forKey: "_id") as? ObjectId, keyForError: "id")
        <% } else if variable.isArray, let elementType = variable.typeName.array?.elementTypeName.name, supportedPrimitives.contains(elementType) { %>
          // The property is a BSON type, so we can just extract it from the document:
          <% if variable.typeName.isOptional { %>
            let <%=variable.name%>Value: <%=variable.typeName%> = <%=variable.typeName.unwrappedTypeName%>(source.removeValue(forKey: "<%=variable.name%>"))
          <% } else { %>
            let <%=variable.name%>Value: <%=variable.typeName%> = try Meow.Helpers.requireValue(<%=variable.typeName%>(source.removeValue(forKey: "<%=variable.name%>")), keyForError: "<%=variable.name%>")
          <% } %>
        <%} else if variable.isArray, variable.typeName.array?.elementTypeName.name == "Reference" {%>
          // o the noes it is a reference
          let <%=variable.name%>Ids = try Meow.Helpers.requireValue(source.removeValue(forKey: "<%=variable.name%>") as? Document, keyForError: "<%=variable.name%>").arrayValue
          let <%=variable.name%>Value: <%=variable.typeName%>

          <% if variable.typeName.isOptional { %>
            if let <%=variable.name%>Ids = <%=variable.name%>Ids {
              <%=variable.name%>Value = try <%=variable.name%>Ids.map { try Meow.Helpers.requireValue(ObjectId($0), keyForError: "<%=variable.name%>") }
            } else {
              <%=variable.name%>Value = nil
            }
          <% } else { %>
            <%=variable.name%>Value = try <%=variable.name%>Ids.map {
              Reference(restoring: try Meow.Helpers.requireValue(ObjectId($0), keyForError: "<%=variable.name%>"))
            }
          <% } %>
        <%} else if variable.isArray, let subType = variable.typeName.array?.elementType, subType.based["Embeddable"] != nil { %>
          <% let flat = variable.typeName.array!.elementTypeName.isOptional ? "flat" : "" %>

          <% if variable.isOptional { %>
            let <%= variable.name%>PrimitiveValues = try Document(source.removeValue(forKey: "<%=variable.name%>"))?.arrayValue
            let <%=variable.name%>Value: <%=variable.typeName%> = try <%=variable.name%>PrimitiveValues?.<%=flat%>map {
              try <%= subType.name %>(value: $0)
            }
          <% } else { %>
            let <%= variable.name%>PrimitiveValues = try Meow.Helpers.requireValue(Document(source.removeValue(forKey: "<%=variable.name%>")), keyForError: "<%=variable.name%>").arrayValue
            let <%=variable.name%>Value: <%=variable.typeName%> = try <%=variable.name%>PrimitiveValues.<%=flat%>map {
              try <%= subType.name %>(value: $0)
            }
          <% } %>
        <% } else { %>
          <% if supportedPrimitives.contains(variable.typeName.unwrappedTypeName) { %>
            // The property is a BSON type, so we can just extract it from the document:
            <% if variable.typeName.isOptional { %>
              let <%=variable.name%>Value: <%=variable.typeName%> = <%=variable.typeName.unwrappedTypeName%>(source.removeValue(forKey: "<%=variable.name%>"))
            <% } else { %>
              let <%=variable.name%>Value: <%=variable.typeName%> = try Meow.Helpers.requireValue(<%=variable.typeName%>(source.removeValue(forKey: "<%=variable.name%>")), keyForError: "<%=variable.name%>")
            <% } %>
          <% } else if variable.typeName.name.hasPrefix("Reference") { %>
            // o the noes it is a reference
            let <%=variable.name%>Id: ObjectId? = source.removeValue(forKey: "<%=variable.name%>") as? ObjectId
            let <%=variable.name%>Value: <%=variable.typeName%>

            <% if variable.typeName.isOptional { %>
              if let <%=variable.name%>Id = <%=variable.name%>Id {
                <%=variable.name%>Value = Reference(restoring: <%=variable.name%>Id)
              } else {
                <%=variable.name%>Value = nil
              }
            <% } else { %>
              <%=variable.name%>Value = Reference(restoring: try Meow.Helpers.requireValue(<%=variable.name%>Id, keyForError: "<%=variable.name%>"))
            <% } %>
          <% } else if variable.type?.based["Embeddable"] != nil { %>
            <% if variable.typeName.isOptional { %>
              let <%=variable.name%>Value: <%=variable.typeName%>
              <% if variable.type?.kind == "enum" { %>
                if let sourceVal = source.removeValue(forKey: "<%=variable.name%>") {
                  <%=variable.name%>Value = try <%=variable.typeName.unwrappedTypeName%>(value: sourceVal)
                } else {
                  <%=variable.name%>Value = nil
                }
              <% } else { %>

                if let <%=variable.name%>Document: Document = source.removeValue(forKey: "<%=variable.name%>") as? Document {
                  <%=variable.name%>Value = try <%=variable.typeName.unwrappedTypeName%>(fromDocument: <%=variable.name%>Document)
                } else {
                  <%=variable.name%>Value = nil
                }
              <% } %>
            <% } else { %>
              <% if variable.type?.kind == "enum" { %>
                let <%=variable.typeName%>Val = try Meow.Helpers.requireValue(source.removeValue(forKey: "<%=variable.name%>"), keyForError: "<%=variable.name%>")
                let <%=variable.name%>Value: <%=variable.typeName%> = try <%=variable.typeName%>(value: <%=variable.typeName%>Val)
              <% } else { %>
                let <%=variable.name%>Document: Document = try Meow.Helpers.requireValue(source.removeValue(forKey: "<%=variable.name%>") as? Document, keyForError: "<%=variable.name%>")
                let <%=variable.name%>Value: <%=variable.typeName%> = try <%=variable.typeName%>(fromDocument: <%=variable.name%>Document)
              <% } %>
            <% } %>
          <% } %>
        <% } %>
      <% } %>

      // Uses the first existing initializer
      // TODO: Support multiple/more complex initializers
      try self.init(
        <% let parameters = type.initializers.first?.parameters ?? [] %>
        <% for (index, parameter) in parameters.enumerated() { %>
          <%= parameter.argumentLabel! %>: <%= parameter.name%>Value
          <% if parameters.count != index+1 { %>
            ,
          <% } %>
        <% } %>
      )

      // Sets the other variables
      <% usedNames = [] %>
      <% for variable in type.variables where !usedNames.contains(variable.name) { %>
        <% usedNames.append(variable.name) %>
        <% if type.based["DynamicSerializable"] != nil && variable.name == "additionalFields" { %>
          self.additionalFields = source
        <% } else { %>
          self.<%=variable.name%> = <%=variable.name%>Value
        <% } %>
      <% } %>
    }

    <%
    // The VirtualInstance of this type. Part of the type safe query language
    %>
    struct VirtualInstance {
      var keyPrefix: String

      <% usedNames = [] %>
      <% for variable in type.variables where !usedNames.contains(variable.name) { %>
        <% usedNames.append(variable.name) %>
        // <%=variable.name%>: <%=variable.typeName%>
        <% if variable.typeName.unwrappedTypeName == "String"
        || variable.typeName.unwrappedTypeName == "ObjectId"
        || variable.typeName.unwrappedTypeName == "Date"
        || variable.typeName.unwrappedTypeName == "Data"
        || variable.typeName.unwrappedTypeName == "Bool" { %>
          var <%= variable.name %>: Virtual<%=variable.unwrappedTypeName%> { return Virtual<%=variable.unwrappedTypeName%>(name: keyPrefix + "<%=variable.name%>") }
        <% } else if variable.typeName.unwrappedTypeName == "[String]"
        || variable.typeName.unwrappedTypeName == "[ObjectId]"
        || variable.typeName.unwrappedTypeName == "[Date]"
        || variable.typeName.unwrappedTypeName == "[Data]"
        || variable.typeName.unwrappedTypeName == "[Bool]" { %>
          var <%= variable.name %>: VirtualArray<Virtual<%=variable.unwrappedTypeName%>> { return VirtualArray<Virtual<%=variable.unwrappedTypeName%>>(name: keyPrefix + "<%=variable.name%>") }
        <% } else if variable.typeName.unwrappedTypeName == "Int"
        || variable.typeName.unwrappedTypeName == "Int32"
        || variable.typeName.unwrappedTypeName == "Int64"
        || variable.typeName.unwrappedTypeName == "Double" { %>
          var <%= variable.name %>: VirtualNumber { return VirtualNumber(name: keyPrefix + "<%=variable.name%>") }
        <% } else if variable.typeName.unwrappedTypeName == "[Int]"
        || variable.typeName.unwrappedTypeName == "[Int32]"
        || variable.typeName.unwrappedTypeName == "[Int64]"
        || variable.typeName.unwrappedTypeName == "[Double]" { %>
          var <%= variable.name %>: VirtualArray<VirtualNumber> { return VirtualArray<VirtualNumber>(name: keyPrefix + "<%=variable.name%>") }
        <% } else if variable.typeName.name.hasPrefix("Reference") { %>
          var <%= variable.name %>: VirtualReference<<%=variable.typeName.unwrappedTypeName%>.Model, <%=variable.typeName.unwrappedTypeName%>.DeleteRule> { return VirtualReference(name: keyPrefix + "<%=variable.name%>") }
        <% } else if variable.typeName.name.hasPrefix("[Reference") { %>
          var <%= variable.name %>: VirtualReferenceArray<<%=variable.typeName.unwrappedTypeName.replacingOccurrences(of: "[", with: "").replacingOccurrences(of: "]", with: "") %>.Model, <%=variable.typeName.unwrappedTypeName.replacingOccurrences(of: "[", with: "").replacingOccurrences(of: "]", with: "")%>.DeleteRule> { return VirtualReferenceArray<<%=variable.typeName.unwrappedTypeName.replacingOccurrences(of: "[", with: "").replacingOccurrences(of: "]", with: "") %>.Model, <%=variable.typeName.unwrappedTypeName.replacingOccurrences(of: "[", with: "").replacingOccurrences(of: "]", with: "")%>.DeleteRule>(name: keyPrefix + "<%=variable.name%>") }
        <% } else if variable.typeName.array?.elementType?.based["Embeddable"] != nil { %>
          <% if variable.typeName.array?.elementType?.kind == "enum" {%>
            var <%=variable.name%>: VirtualSingleValueArray<<%=variable.typeName.array!.elementTypeName.name%>> { return VirtualSingleValueArray<<%=variable.typeName.array!.elementTypeName.name%>>(name: keyPrefix + "<%=variable.name%>") }
          <% } else { %>
            var <%=variable.name%>: VirtualEmbeddablesArray<<%=variable.typeName.array!.elementTypeName.name%>> { return VirtualEmbeddablesArray<<%=variable.typeName.array!.elementTypeName.name%>>(name: keyPrefix + "<%=variable.name%>.") }
          <% } %>
        <% } else if variable.type?.based["Embeddable"] != nil { %>
          <% if variable.type?.kind == "enum" {%>
            var <%=variable.name%>: <%=variable.typeName.unwrappedTypeName%>.VirtualInstance { return <%=variable.typeName.unwrappedTypeName%>.VirtualInstance(keyPrefix: "<%=variable.name%>") }
          <% } else { %>
            var <%=variable.name%>: <%=variable.typeName.unwrappedTypeName%>.VirtualInstance { return <%=variable.typeName.unwrappedTypeName%>.VirtualInstance(keyPrefix: "<%=variable.name%>.") }
          <% } %>
        <% } else { %>
          // <%=variable%>
        <% } %>
      <% } %>

      init(keyPrefix: String = "") {
        self.keyPrefix = keyPrefix
      }
    }

    <%
    // Keeps track of all references in this model
    // Used for applying delete rules on references
    %>
    var meowReferencesWithValue: [(key: String, destinationType: ConcreteModel.Type, deleteRule: DeleteRule.Type, id: ObjectId)] {
      var result = [(key: String, destinationType: ConcreteModel.Type, deleteRule: DeleteRule.Type, id: ObjectId)]()
      _ = result.popLast() // to silence the warning of not mutating above variable in the case of a type with no references

      <% for variable in type.variables { %>
        <% if variable.typeName.name.hasPrefix("Reference") { %>
          <% if variable.isOptional { %>
            if let <%=variable.name%>Value = self.<%=variable.name%> {
            <% } else { %>
              let <%=variable.name%>Value = self.<%=variable.name%>
            <% } %>
            result.append(("<%=variable.name%>", <%=variable.name%>Value.destinationType, <%=variable.name%>Value.deleteRule, <%=variable.name%>Value.id))
            <% if variable.isOptional { %>
            }
          <% } %>
        <% } %>
      <% } %>

      return result
    }
  }
<% } %>


<%
// For each model, generate a type safe query language and helpers for Vapor
for type in types.based["Model"] ?? [] {
  %>
  extension <%= type.name %> : ConcreteModel {
    static let meowCollection = Meow.database["<%= type.name.lowercased() %>"]

    static func find(_ closure: ((VirtualInstance) -> (Query))) throws -> Cursor<<%= type.name %>> {
      let query = closure(VirtualInstance())
      return try self.find(query)
    }

    static func findOne(_ closure: ((VirtualInstance) -> (Query))) throws -> <%= type.name %>? {
      let query = closure(VirtualInstance())
      return try self.findOne(query)
    }

    static func count(_ closure: ((VirtualInstance) -> (Query))) throws -> Int {
      let query = closure(VirtualInstance())
      return try self.count(query)
    }

    static func createIndex(named name: String? = nil, withParameters closure: ((VirtualInstance, IndexSubject) -> ())) throws {
      let indexSubject = IndexSubject()
      closure(VirtualInstance(), indexSubject)

      try meowCollection.createIndexes([(name: name ?? "", parameters: indexSubject.makeIndexParameters())])
    }
  }

<% } %>
